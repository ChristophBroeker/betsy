apply plugin: "groovy"
apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

// Main class of betsy
mainClassName = "configuration.TestUsingParameters"

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDir 'src/main/java'
            srcDir 'src/main/groovy'
            srcDir 'src/main/tests'
            exclude 'betsy/virtual/server/**'
        }
        resources {
            srcDir 'src/main/resources'
            exclude 'virtual/server/**'
        }
    }
}

ext {
    downloadsDir = "downloads"
    soapuiArchiveName = "SoapUI-4.6.1-windows-bin.zip"
    soapuiDownloadUrl = "https://lspi.wiai.uni-bamberg.de/svn/betsy/${soapuiArchiveName}"
    soapuiDownloadedFile = "${downloadsDir}/${soapuiArchiveName}"
    soapuiDir = "soapui"
    soapuiInstallDir = "${soapuiDir}/SoapUI-4.6.1"
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.5'

    compile 'org.apache.ant:ant:1.9.1'
    compile 'log4j:log4j:1.2.17'
    compile 'org.virtualbox:vboxjws:4.2.8'
    compile 'commons-daemon:commons-daemon:1.0.12'

    testCompile 'junit:junit:4.11'

    compile files(fileTree(dir: "${soapuiInstallDir}\\lib", includes: ['*.jar'], exclude: ['log4j-*', 'xml-apis-*', 'groovy*']))
    compile files(fileTree(dir: "${soapuiInstallDir}\\bin", includes: ['*.jar']))
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task installSoapUI << {
    ant.get dest: downloadsDir, skipexisting: true, {
        ant.url url: soapuiDownloadUrl
    }

    if(!new File(soapuiInstallDir).exists()) {
        ant.mkdir dir: soapuiDir
        ant.unzip src: soapuiDownloadedFile, dest: soapuiDir
    }
}
compileJava.dependsOn installSoapUI

task checkRunRequirements << {
    // check ant existence
    try {
        "ant.bat -v".execute()
    } catch (IOException e){
        throw new IllegalStateException("ant is not available on the PATH", e)
    }
}
run.dependsOn checkRunRequirements

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task enginecontrol(type: JavaExec, dependsOn: build) {
    description = 'Starts Engine Control GUI'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.EngineControl"
}

task partnerservice(type: JavaExec, dependsOn: build) {
    description = 'Starts test case partner service only'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.PartnerServiceControl"
}
