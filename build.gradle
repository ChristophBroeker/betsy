apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

mainClassName = "configuration.TestUsingParameters"

repositories {
    mavenCentral()
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/tests', 'src/main/java']
        }
    }
}

ext {
    downloadsDir = "downloads"

    // soapui parameter
    soapuiArchiveName = "SoapUI-4.6.1-windows-bin.zip"
    soapuiDownloadUrl = "https://lspi.wiai.uni-bamberg.de/svn/betsy/${soapuiArchiveName}"
    soapuiDownloadedFile = "${downloadsDir}/${soapuiArchiveName}"
    soapuiDir = "soapui"
    soapuiInstallDir = "${soapuiDir}/SoapUI-4.6.1"

    // ant parameter
    antArchiveName = "apache-ant-1.9.2-bin.zip"
    antDownloadUrl = "https://lspi.wiai.uni-bamberg.de/svn/betsy/${antArchiveName}"
    antDownloadedFile = "${downloadsDir}/${antArchiveName}"
    antDir = "ant"
    antInstallDir = "${antDir}/apache-ant-1.9.2"
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.8'
    compile 'org.apache.ant:ant:1.9.2'
    compile 'log4j:log4j:1.2.14'

    compile files(fileTree(dir: "${soapuiInstallDir}\\bin", includes: ['*.jar']))
    compile files(fileTree(dir: "${soapuiInstallDir}\\lib", includes: ['*.jar'], excludes: ['groovy*', 'log4j*']))
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task installSoapUI << {
    ant.mkdir dir: downloadsDir
    ant.get dest: downloadsDir, skipexisting: true, {
        ant.url url: soapuiDownloadUrl
    }

    if (!new File(soapuiInstallDir as String).exists()) {
        ant.mkdir dir: soapuiDir
        ant.unzip src: soapuiDownloadedFile, dest: soapuiDir
    }
}

task installAnt << {
    ant.mkdir dir: downloadsDir
    ant.get dest: downloadsDir, skipexisting: true, {
        ant.url url: antDownloadUrl
    }

    if (!new File(antInstallDir as String).exists()) {
        ant.mkdir dir: antDir
        ant.unzip src: antDownloadedFile, dest: antDir
    }
}

compileGroovy.dependsOn installSoapUI
installSoapUI.dependsOn installAnt

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task enginecontrol(type: JavaExec, dependsOn: build) {
    description = 'Starts Engine Control GUI'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.EngineControl"
}

task partnerservice(type: JavaExec, dependsOn: build) {
    description = 'Starts test case partner service only'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.PartnerServiceControl"
}
