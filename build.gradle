apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

// Main class of betsy
mainClassName = "betsy.Main"

repositories {
    mavenCentral()
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/tests', 'src/main/java']
        }
        resources {
            srcDirs = ['src/main/groovy', 'src/main/resources', 'src/main/xslt', 'src/main/tests']
        }
    }
}

ext {
    config = new ConfigSlurper().parse(new File(project.rootDir, "Config.groovy").toURI().toURL())
}

configurations {
    internal
    external
}

dependencies {
    internal 'org.codehaus.groovy:groovy-all:2.2.0'

    internal 'org.apache.ant:ant:1.9.2'
    internal 'log4j:log4j:1.2.17'
    internal 'org.virtualbox:vboxjws:4.2.8'
    internal 'commons-daemon:commons-daemon:1.0.12'
    //internal 'org.apache.commons:commons-io:1.3.2'
    //internal files(fileTree(dir: "downloads", includes: ['commons-io-2.4.jar']))
    internal 'commons-io:commons-io:2.4'
    internal 'commons-lang:commons-lang:2.4'
    internal 'org.apache.ant:ant-apache-log4j:1.9.2'
    internal 'org.json:json:20140107'
    internal 'org.apache.ant:ant-junit:1.9.3'

    internal files(fileTree(dir: "downloads", includes: ['jbpm-runtime-manager-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['kie-services-client-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['kie-api-6.0.1.Final.jar']))
    //internal files(fileTree(dir: "downloads", includes: ['resteasy-jaxrs-3.0.6.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['drools-core-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['jbpm-audit-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['kie-internal-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['jbpm-shared-services-6.0.1.Final.jar']))
    internal files(fileTree(dir: "downloads", includes: ['jbpm-human-task-core-6.0.1.Final.jar']))
    //internal files(fileTree(dir: "downloads", includes: ['slf4j-api-1.7.6.jar']))
    //internal files(fileTree(dir: "downloads", includes: ['slf4j-simple-1.7.6.jar']))
    //internal files(fileTree(dir: "downloads", includes: ['javaee-api-7.0.jar']))
    //internal files(fileTree(dir: "downloads", includes: ['resteasy-jaxb-provider-3.0.6.Final.jar']))

    internal 'javax:javaee-api:7.0'
    //internal 'org.drools:drools-core:6.0.1.Final'
    //internal 'org.kie:kie-api:6.0.1.Final'
    //internal 'org.kie:kie-internal:6.0.1.Final'
    //internal 'org.kie.remote:kie-services-client:6.0.1.Final'
    internal 'org.jboss.resteasy:resteasy-jaxrs:3.0.6.Final'
    internal 'org.jboss.resteasy:resteasy-jaxb-provider:3.0.6.Final'
    //internal 'org.jbpm:jbpm-audit:6.0.1.Final'
    //internal 'org.jbpm:jbpm-human-task-core:6.0.1.Final'
    //internal 'org.jbpm:jbpm-runtime-manager:6.0.1.Final'
    //internal 'org.jbpm:jbpm-shared-services:6.0.1.Final'
    internal 'org.slf4j:slf4j-api:1.7.6'
    internal 'org.slf4j:slf4j-simple:1.7.6'

    testCompile 'junit:junit:4.11'

    external files(fileTree(dir: "${config.soapui.home}/bin", includes: ['*.jar']))
    external files(fileTree(dir: "${config.soapui.home}/lib", includes: ['*.jar'], excludes: ['groovy*', 'log4j*', 'commons-io*', 'commons-lang*']))

    compile configurations.internal
    compile configurations.external
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

task downloadMaven {
    outputs.file new File("${config.downloads.dir}/${config.maven.download.filename}")

    doLast {
        ant.mkdir dir: config.downloads.dir
        ant.get dest: config.downloads.dir, maxtime: 240, {
            ant.url url: config.maven.download.url
        }
    }
}

task installMaven {
    ext.srcFile = new File("${config.downloads.dir}/${config.maven.download.filename}")
    ext.destDir = new File(config.maven.container)

    inputs.file srcFile
    outputs.dir destDir

    doLast {
        ant.mkdir dir: new File(config.maven.home)
        ant.unzip src: srcFile, dest: destDir
    }
}

task downloadJPBMDeployer {
    outputs.file new File("${config.downloads.dir}/${config.jbpmdeployer.download.filename}")

    doLast {
        ant.mkdir dir: config.downloads.dir
        ant.get dest: config.downloads.dir, maxtime: 240, {
            ant.url url: config.jbpmdeployer.download.url
        }
    }
}

task installJBPMDeployer {
    ext.srcFile = new File("${config.downloads.dir}/${config.jbpmdeployer.download.filename}")
    ext.destDir = new File(config.jbpmdeployer.home)

    inputs.file srcFile
    outputs.dir destDir

    doLast {
        ant.mkdir dir: new File(config.jbpmdeployer.home)
        ant.unzip src: srcFile, dest: destDir
    }
}

task downloadSoapUI {
    outputs.file new File("${config.downloads.dir}/${config.soapui.download.filename}")

    doLast {
        ant.mkdir dir: config.downloads.dir
        ant.get dest: config.downloads.dir, maxtime: 240, {
            ant.url url: config.soapui.download.url
        }
    }
}

task installSoapUI {
    ext.srcFile = new File("${config.downloads.dir}/${config.soapui.download.filename}")
    ext.destDir = new File(config.soapui.container)

    inputs.file srcFile
    outputs.dir destDir

    doLast {
        ant.mkdir dir: new File(config.soapui.home)
        ant.unzip src: srcFile, dest: destDir
    }
}

task downloadAnt {
    outputs.file new File("${config.downloads.dir}/${config.ant.download.filename}")

    doLast {
        ant.mkdir dir: config.downloads.dir
        ant.get dest: config.downloads.dir, maxtime: 120, {
            ant.url url: config.ant.download.url
        }
    }
}

task installAnt {
    ext.srcFile = new File("${config.downloads.dir}/${config.ant.download.filename}")
    ext.destDir = new File(config.ant.container)

    inputs.file srcFile
    outputs.dir new File(config.ant.home)

    doLast {
        ant.mkdir dir: destDir
        ant.unzip src: srcFile, dest: destDir
    }

}

installMaven.dependsOn downloadMaven
installJBPMDeployer.dependsOn downloadJPBMDeployer
installSoapUI.dependsOn downloadSoapUI
compileGroovy.dependsOn installSoapUI
installAnt.dependsOn downloadAnt
installSoapUI.dependsOn installAnt
installSoapUI.dependsOn installJBPMDeployer
installSoapUI.dependsOn installMaven

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task enginecontrol(type: JavaExec, dependsOn: build) {
    description = 'Starts Engine Control GUI'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.EngineControl"
}

task partnerservice(type: JavaExec, dependsOn: build) {
    description = 'Starts test case partner service only'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.PartnerServiceControl"
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

task internalClasses(dependsOn: classes) {
    inputs.files configurations.internal
    outputs.dir "build/internalClasses"

    doLast {
        copy {
            from { configurations.internal.collect { it.isDirectory() ? it : zipTree(it) } }
            into "build/internalClasses"
        }
    }
}

task zipSingleTestRun(type: Zip) {
    into("test") {
        from files("test")
    }
    from files("betsy.log")
    from files("betsy_console.log")
    from files("betsy_time.log")

    if(project.hasProperty("zipArchiveBaseName")) {
        baseName = project.zipArchiveBaseName
    } else {
        // use default
        baseName = "test-folder-and-logs"
    }
}

/**
 * Creates jar file for the virtual machines.
 */
task jarServer(type: Jar, dependsOn: [classes, internalClasses]) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources)
    from files("build/internalClasses")

    // results in build/libs/betsy-vms.jar
    classifier = 'vms'
    baseName = 'betsy'

    manifest {
        attributes 'Main-Class': 'betsy.virtual.server.BetsyVirtualMachineServer', 'Implementation-Title': 'Betsy-VirtualMachineServer'
    }
}

task install(type: JavaExec, dependsOn: jarServer) {
    description = 'Install virtual machines to use the virtual engines'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.VirtualMachineInstaller"

    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}
