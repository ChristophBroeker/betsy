apply plugin: "groovy"
apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

// Main class of betsy
mainClassName = "configuration.TestUsingParameters"

repositories {
    mavenCentral()
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/tests', 'src/main/java']
            exclude 'betsy/virtual/server/**'
        }
        resources {
            srcDir 'src/main/resources'
            exclude 'virtual/server/**'
        }
    }
}

ext {
    config = new ConfigSlurper().parse(new File("Config.groovy").toURI().toURL())
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.8'

    compile 'org.apache.ant:ant:1.9.2'
    compile 'log4j:log4j:1.2.17'
    compile 'org.virtualbox:vboxjws:4.2.8'
    compile 'commons-daemon:commons-daemon:1.0.12'

    testCompile 'junit:junit:4.11'

    compile files(fileTree(dir: "${config.soapui.home}/bin", includes: ['*.jar']))
    compile files(fileTree(dir: "${config.soapui.home}/lib", includes: ['*.jar'], excludes: ['groovy*', 'log4j*']))
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task installSoapUI << {
    ant.mkdir dir: config.downloads.dir
    ant.get dest: config.downloads.dir, skipexisting: true, {
        ant.url url: config.soapui.download.url
    }

    if (!new File(config.soapui.home as String).exists()) {
        ant.mkdir dir: config.soapui.container
        ant.unzip src: "${config.downloads.dir}/${config.soapui.download.filename}", dest: config.soapui.container
    }
}

task installAnt << {
    ant.mkdir dir: config.downloads.dir
    ant.get dest: config.downloads.dir, skipexisting: true, {
        ant.url url: config.ant.download.url
    }

    if (!new File(config.ant.home as String).exists()) {
        ant.mkdir dir: config.ant.container
        ant.unzip src: "${config.downloads.dir}/${config.ant.download.filename}", dest: config.ant.container
    }
}

compileGroovy.dependsOn installSoapUI
installSoapUI.dependsOn installAnt

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task enginecontrol(type: JavaExec, dependsOn: build) {
    description = 'Starts Engine Control GUI'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.EngineControl"
}

task partnerservice(type: JavaExec, dependsOn: build) {
    description = 'Starts test case partner service only'
    classpath = sourceSets.main.runtimeClasspath
    main = "betsy.tool.PartnerServiceControl"
}
